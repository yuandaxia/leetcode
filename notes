ArrayList<Integer> al = new ArrayList<Integer>();
    al.contains(1);
    al.get(0);
    al.remove(0);
    al.size();
    al.isEmpty();
    al.add(object);
    al.add(index,object);
    al.set(index,object);
int [] a = Arrays.copyOfRange(a, 1, 5);

after open brower what happens

Stack<Character> s = new Stack<Character>();
degenerate treeï¼Œ find common ancestor worsest O(n2)

for(Map.Entry<Float,Integer> entry : hm.entrySet()){
				 if(entry.getValue()+ duplicate>max){
					 max = entry.getValue()+ duplicate;
				 }
			 }
			 if(hm.containsKey(k)){
					 hm.put(k, hm.get(k)+1);
				 }else hm.put(k,1);
Integer.parseInt(str)
String.valueOf();
StringBuffer sb = new StringBuffer();
sb.length();
sb.delete(i,j)
sb.deleteCharAt(i)

int 2 pow 32 -1


 forward slash [ / ] , back slash [ \ ], dash [ - ], apostrophe [ ' ], semi-colon [ ; ], colon [ : ] and underscore [ _ ].


try(BufferedReader br = new BufferedReader(new FileReader("file.txt"))) {
        StringBuilder sb = new StringBuilder();
        String line = br.readLine();

        while (line != null) {
            sb.append(line);
            sb.append(System.lineSeparator());
            line = br.readLine();
        }
        String everything = sb.toString();
    }

 public synchronized void enqueue(T item) throws InterruptedException {
 
 
 //sort collection
public void sortArrayList(ArrayList<Interval> intervals){
		Collections.sort(intervals, new Comparator<Interval>(){
			public int compare(Interval o1, Interval o2){
				return o1.start-o2.start;
			}
		});
	}
 
 
 
