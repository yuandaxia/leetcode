Static variables represent global state. That's hard to reason about and hard to test: if I create a new instance of an 
object, I can reason about its new state within tests. If I use code which is using static variables, it could be in 
any state - and anything could be modifying it.

I could go on for quite a while, but the bigger concept to think about is that the tighter the scope of something, 
the easier it is to reason about. We're good at thinking about small things, but it's hard to reason about the state 
of a million line system if there's no modularity. This applies to all sorts of things, by the way - not just static 
variables.

statics have a lifetime that matches the entire runtime of the program. 
t isnâ€™t associated with an instance of a class. Instead, the member belongs to the class itself. 
As a result, you can access the static member without first creating a class instance.


HashMap and hashfunction
http://stackoverflow.com/questions/9364134/what-hashing-function-does-java-use-to-implement-hashtable-class


Top k http://rritw.com/a/JAVAbiancheng/JAVAzonghe/20130602/362595.html



You can think in serialization as the process to convert an object instance, into a sequence of bytes ( which may be binary or not depends on the implementation ) .
It is very useful when you want to transmit one object data across the network, for instance from one JVM to another.
The keyword transient in Java used to indicate that the variable should not be serialized. - 


Observer Pattern, Decorator pattern, Factory Pattern, Singleton Pattern

Observer Pattern
Define a one-to-many dependency between objects so that when one object changes state, 
all its dependents are notified and updated automatically.
http://www.codeproject.com/Articles/565642/Observer-design-pattern-in-java

Singleton Pattern
he singleton pattern is a design pattern that restricts the instantiation of a class to one object. 
This is useful when exactly one object is needed to coordinate actions across the system. 
public class SingletonDemo {
    private static SingletonDemo instance = null;
    private SingletonDemo() { }
    public static synchronized SingletonDemo getInstance() {
        if (instance == null) {
            instance = new SingletonDemo();
        }
        return instance;
    }
}

public class SingletonDemo {
    private static volatile SingletonDemo instance = null;
    private SingletonDemo() { }
    public static SingletonDemo getInstance() {
        if (instance == null) {
            synchronized (SingletonDemo.class) {
                if (instance == null) {
                    instance = new SingletonDemo();
                }
            }
        }
        return instance;
    }
}

Factory Pattern
the factory method pattern is a creational pattern which uses factory methods to deal with the 
problem of creating objects without specifying the exact class of object that will be created. 

http://www.tutorialspoint.com/design_pattern/factory_pattern.htm
public class ShapeFactory {
	
   //use getShape method to get object of type shape 
   public Shape getShape(String shapeType){
      if(shapeType == null){
         return null;
      }		
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
      } else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }
      return null;
   }
}


Decorator pattern allows to add new functionality an existing object without altering its structure. 
This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.
http://www.tutorialspoint.com/design_pattern/decorator_pattern.htm

Hashtable vs binary seach tree
http://brackece.wordpress.com/2012/09/18/hash-table-vs-binary-search-tree/

Thread vs process
The typical difference is that threads (of the same process) run in a shared memory space, while processes run in separate memory spaces.

4.  Processes are independent of each other.  Threads, since they 
share the same address space are interdependent, so caution 
must be taken so that different threads don't step on each other.  
This is really another way of stating #2 above.
						
5.  A process can consist of multiple threads.

Runnable and Callable
http://stackoverflow.com/questions/141284/the-difference-between-the-runnable-and-callable-interfaces-in-java
