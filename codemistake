 public ArrayList<ArrayList<Integer>> subsets(int[] S) {
        ArrayList<ArrayList<Integer>> res = new  ArrayList<ArrayList<Integer>>();
        if(S==null||S.length==0) return res;
        Arrays.sort(S);
        ArrayList<Integer> al = new ArrayList<Integer>();
        res.add(al);
        for(int i=0;i<S.length;i++){
            int size = res.size();
            for(int j=0;j<size;j++){
                al = new ArrayList<Integer>(res.get(j));// here is important!!!!
                al.add(S[i]);
                res.add(al);
            }
        }
        return res;
    }


           String str = strs[i];
            char [] temp = str.toCharArray();
            Arrays.sort(temp);
            String newStr = String.valueOf(temp);//!!!!!!!!!!!!!!!!!!!!!!!!


public List<TreeNode> generateTrees(int n) {
        return buildTree(1,n);
    }
    
    private  ArrayList<TreeNode> buildTree(int start, int end){
        //if(start>end) return null; this is wrong!!!!!!!!!!!!!!!!!!!!!!
        
        ArrayList<TreeNode> res=  new ArrayList<TreeNode>();
        if(start>end){
            res.add(null);
            return res;
        }
        
        for(int i=start;i<=end;i++){
            TreeNode node = new TreeNode(i);
            ArrayList<TreeNode> left = buildTree(start, i-1);
            ArrayList<TreeNode> right = buildTree(i+1, end);
            for(int p=0; p<left.size();p++){
                TreeNode l = left.get(p);
                for(int q=0;q<right.size();q++){
                    TreeNode r = right.get(q);
                    node.left=l;
                    node.right=r;
                    res.add(node);
                }
            }
        }
        return res;
        
    }



 public ListNode insertionSortList(ListNode head) {
        ListNode fakeHead = new ListNode(Integer.MIN_VALUE);
        //fakeHead.next =head;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        
        ListNode node = head;
        while(node!=null){
            ListNode next = node.next;
            ListNode pre = fakeHead;
            while(pre.next!=null&&pre.next.val<node.val){
                pre = pre.next;
            } 
            
            
            node.next = pre.next;
            pre.next = node;
            
            
            
            node = next;
        }
        
        
        
        return fakeHead.next;
    }


//three sum
 for(int i=0;i<num.length;i++){
            if(i-1>=0&&num[i]==num[i-1]) continue;//!!!!!!!!!!!!!!!!!!!!!!!!!
            int target = 0-num[i];
            int start = i+1, end = num.length-1;
            while(start<end){
                int val = num[start]+num[end];
                if(val>target){
                    end--;
                }else if(val<target){
                    start++;
                }else{
                    ArrayList<Integer> al = new ArrayList<Integer>();
                    al.add(num[i]);
                    al.add(num[start]);
                    al.add(num[end]);
                    res.add(al);
                    start++;
                    end--;
                    while(start<num.length&&num[start]==num[start-1]) start++;//!!!!!!!!!!!!!!!!!!!!!!!!!
                    while(end>=0&&num[end]==num[end+1])end--;//!!!!!!!!!!!!!!!!!!!!!!!!!

                }
            }
        }


//4 sum
for(int i=0;i<num.length;i++){
            if(i-1>=0&&num[i-1]==num[i]) continue;
            int tempTarget = target - num[i];
            for(int j=i+1;j<num.length;j++){
                int newTarget = tempTarget - num[j];
                if(j-1>=i+1&&num[j-1]==num[j]) continue;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@!!!!!!!!!!!!
                int start = j+1, end = num.length-1;
                while(start<end){
                    int val = num[end]+num[start];
                    if(newTarget>val){
                        start++;
                    }else if(newTarget<val){
                        end--;
                    }else{
                        ArrayList<Integer> al = new ArrayList<Integer>();
                        al.add(num[i]);
                        al.add(num[j]);
                        al.add(num[start]);
                        al.add(num[end]);
                        res.add(al);
                        start++;
                        end--;
                        while(start<end&&num[start-1]==num[start]) start++;
                        while(start<end&&num[end+1]==num[end]) end--;
                    }
                    
                }
            }
            
        }

// min window
 int start = 0, min=Integer.MAX_VALUE;
        int rS=0, rE=0;
        for(int i=0;i<S.length();i++){
            char c = S.charAt(i);
           
            if(needToRead[c]>alreadyRead[c]){////////////////////////////////////
                alreadyReadCount++;//////////////////////////// order
            }////////////////////////////////////
             alreadyRead[c]++;////////////////////
            if(alreadyReadCount==needToReadCount){
    
                while(start<S.length()){
                    if(needToRead[S.charAt(start)]==0){
                        start++;
                    }else if(needToRead[S.charAt(start)]<alreadyRead[S.charAt(start)]){
                        alreadyRead[S.charAt(start)]--;
                        start++;
                    }else break;
                }
                if(i-start<min){
                    min = i-start;
                    rS = start;
                    rE = i;
                }
                
                
            }
        }
        if(alreadyReadCount<T.length()) return "";// condition return ""
        return S.substring(rS,rE+1);


//sort collection
public void sortArrayList(ArrayList<Interval> intervals){
		Collections.sort(intervals, new Comparator<Interval>(){
			public int compare(Interval o1, Interval o2){
				return o1.start-o2.start;
			}
		});
	}
